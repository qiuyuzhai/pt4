#include "pt4.h"
#include "mpi.h"
/*A real number is given in each process.
Send the given number from the master process to all slave processes and send the given numbers from the slave processes to the master process.
Output the received numbers in each process.
The numbers received by the master process should be output in ascending?? order of ranks of sending processes.
Use the MPI_Ssend function to send data.
????????????
Note. The MPI_Ssend function provides a synchronous?? data transfer mode, in which the operation of sending a message will be completed only after the receiving process starts to receive this message.
In the case of data transfer in synchronous mode, there is a danger of deadlocks because of the incorrect order of the function calls for sending and receiving data.
MPI_Ssend ???????????????????????????????????????
????????????????????????????????
????????? A ???? B ???????? B ?????? A ????????????????????????
???????????????????????*/
// alt+shift+f????
void Solve()
{
    Task("MPI2Send11"); 
    int flag;
    MPI_Initialized(&flag); // ?? MPI ????????????????
    if (flag == 0)
        return; // ???????????

    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size); // ??????????? size ?
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // ??????? rank????? rank ?

    double a; // ???????????
    MPI_Status s; // ??????????????????

    if (rank > 0) // ????????????rank 0?
    {
        pt >> a; // ??????????? a
        MPI_Send(&a, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD); //?a??????
        MPI_Recv(&a, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &s); //????????
        pt << a; // ?????????
    }
    else // ???????????rank 0?
    {
        pt >> a; // ??????????? a
        for (int i = 1; i < size; ++i) // ????????
            MPI_Ssend(&a, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD); // ??????? a?????

        for (int i = 1; i < size; ++i) // ??????????
        {
            MPI_Recv(&a, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, &s); // ?????????
            pt << a; // ?????????
        }
    }
}
