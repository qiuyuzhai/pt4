#include "pt4.h"

#include "mpi.h"

#include <cmath>
/*
???????????? NA, P, NB ????????????? A?B ? C ??????????????? MPI9Matr12 ???????

????????????? AR????? A?? BR????? B??????????????? CR????? C??
???????????????????? AR ?????????????
??? 1 ????? 0?
??? 2 ????? 1?
...
??? 0 ????? K-1????K ???????

?? MPI_Sendrecv_replace ??????? AR ?????
??????????????? % ?????????

?????? Matr2Calc??????????????
???????????? CR ? AR ???
??????????? Solve ????

????????AR ???? A ?????? BR ???? B ?????
??????? CR ???????????????????????
??? CR ???????? rank ???
????? 0 ? C0 ?? NA ??????
?? K-1 ? CK-1 ??? NA ??????
*/
int k; // number of processes
int r; // rank of the current process

int m, p, q; // sizes of the given matrices
int na, nb;  // sizes of the matrix bands

int *a_, *b_, *c_; // arrays to store matrices in the master process
int *a, *b, *c;    // arrays to store matrix bands in each process

MPI_Datatype MPI_BAND_B; // datatype for the band of the matrix B
MPI_Datatype MPI_BAND_C; // datatype for the band of the matrix C

void Matr2Calc(int step)
{
    int n;
    int i = 0;
    while (i < na)
    {
        int j = 0;
        while (j < nb)
        {
            n = 0;
            int k = 0;
            while (k < p)
            {
                n += a[i * p + k] * b[k * nb + j];
                k++;
            }
            c[(r + k + step) % k * na * nb + i * nb + j] = n;
            j++;
        }
        i++;
    }
    MPI_Sendrecv_replace(a, na * p, MPI_INT, (r + k - 1) % k, 0, (r + k + 1) % k, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
}

void Solve()
{
    Task("MPI9Matr13");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    k = size;
    r = rank;

    // Read the band sizes and allocate memory for each process
    pt >> na >> p >> nb;
    a = new int[na * p];
    b = new int[p * nb];
    c = new int[na * k * nb];

    // Read the band data for matrices A, B, and C in each process
    for (int i = 0; i < na * p; i++)
    {
        pt >> a[i];
    }
    for (int i = 0; i < p * nb; i++)
    {
        pt >> b[i];
    }
    for (int i = 0; i < na * k * nb; i++)
    {
        pt >> c[i];
    }

    // Perform the matrix multiplication and cyclic shift
    Matr2Calc(0);

    // Output the contents of the bands CR and AR in each process
    for (int i = 0; i < na * k * nb; i++)
    {
        pt << c[i];
    }
    for (int i = 0; i < na * p; i++)
    {
        pt << a[i];
    }
    delete[] a;
    delete[] b;
    delete[] c;
}
