#include "pt4.h" 
#include "mpi.h"

void Solve()
{
    Task("MPI5Comm29");  
    int flag;
    MPI_Initialized(&flag);  
    if (flag == 0)
        return;  

    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);  // ??????
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // ?????????

    int n = size / 2;  // ?? n????????????
    
    // ????????????????
    int *index = new int[size],
        *edges = new int[2 * (size - 1)];

    // ???????
    index[0] = 2;  // ????????????
    index[1] = 3;  // ????????????
    
    // ??????
    edges[0] = 1;  // 0??????
    edges[1] = 2;  // 0??????
    edges[2] = 0;  // 1??????
    int j = 3;  // ???? edges ???????

    // ???????????
    for (int i = 1; i <= n - 2; ++i)
    {
        index[2 * i] = index[2 * i - 1] + 3;  // ???????????
        edges[j] = 2 * i - 2;  // ??????????
        edges[j + 1] = 2 * i + 1;  // ??????????
        edges[j + 2] = 2 * i + 2;  // ??????????
        index[2 * i + 1] = index[2 * i] + 1;  // ??????????????
        edges[j + 3] = 2 * i;  // ?????????
        j += 4;  // ?? edges ?????
    }
    
    // ???????????????
    index[2 * n - 2] = index[2 * n - 3] + 2;  // ????????????????
    index[2 * n - 1] = index[2 * n - 2] + 1;  // ???????????????
    edges[j] = 2 * n - 4;  // ????????????
    edges[j + 1] = 2 * n - 1;  // ????????????
    edges[j + 2] = 2 * n - 2;  // ????????????

    // ?????
    MPI_Comm g_comm;
    MPI_Graph_create(MPI_COMM_WORLD, size, index, edges, 0, &g_comm);

    // ???????????
    int count;
    MPI_Graph_neighbors_count(g_comm, rank, &count);
    
    // ?????????????????
    int *neighbors = new int[count];
    MPI_Graph_neighbors(g_comm, rank, count, neighbors);  // ?????????

    int a, b;
    pt >> a;  // ???????? A
    for (int i = 0; i < count; ++i)
    {
        // ????????? A ?????????????
        MPI_Sendrecv(&a, 1, MPI_INT, neighbors[i], 0,
                     &b, 1, MPI_INT, neighbors[i], 0, g_comm, MPI_STATUS_IGNORE);
        pt << b;  // ???????
    }

    // ?????????
    delete[] index;
    delete[] edges;
    delete[] neighbors;
}
