#include "pt4.h"
#include "mpi.h"
/*
???????
?????????????? X??????????????????
?????????????? Y??????????????????
*/
void Solve()
{
    Task("MPI8Inter9");

    // ?? MPI ?????
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;

    // ????????MPI_COMM_WORLD???????
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // ???????????????????
    MPI_Comm peer;
    MPI_Comm_dup(MPI_COMM_WORLD, &peer);

    // ??????? C ?????
    int c;
    pt >> c;

    // ?? c ? 0?????? MPI_UNDEFINED???????????
    if (c == 0) {
        c = MPI_UNDEFINED;
    }

    // ?? C ??????
    MPI_Comm local;
    MPI_Comm_split(MPI_COMM_WORLD, c, rank, &local);

    // ???????????????local == MPI_COMM_NULL???? -1 ???
    if (local == MPI_COMM_NULL) {
        pt << -1;
        return;
    }

    // ???????????????
    int local_rank;
    MPI_Comm_rank(local, &local_rank);
    pt << local_rank;

    // ??????
    MPI_Comm inter;
    int lead = 0; // ????????????????
    if (rank == 0) {
        lead = size / 2; // ????C=1??????????????????
    }
    // ??????
    MPI_Intercomm_create(local, 0, peer, lead, 100, &inter);

    // ?????????????
    int remote_size;
    MPI_Comm_remote_size(inter, &remote_size);
    Show(remote_size); // ??????????????

    // ????
    MPI_Status s;
    int a, b;
    pt >> a; // ???????????????? X?????? Y?

    // ?????????
    for (int i = 0; i < remote_size; i++) {
        MPI_Send(&a, 1, MPI_INT, i, 0, inter);       // ?????????????????????
        MPI_Recv(&b, 1, MPI_INT, i, 0, inter, &s);  // ???????????????
        pt << b;                                    // ???????
    }
}
