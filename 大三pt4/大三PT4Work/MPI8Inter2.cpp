#include "pt4.h"

#include "mpi.h"

void Solve()
{
    Task("MPI8Inter2");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    MPI_Comm p;                       // ????????? p
    MPI_Comm_dup(MPI_COMM_WORLD, &p); // ??????? MPI_COMM_WORLD ? p
    int c;                            // ???? c????????????
    pt >> c;                          // ???? pt ??? c ??
    double a, b;                      // ????????? a ? b
    pt >> a;                          // ???? pt ??? a ??
    MPI_Comm local;                   // ??????????? local

    if (c == 0) // ????????? c ? 0
    {
        MPI_Comm_split(MPI_COMM_WORLD, c, rank, &local); // ?? c ???? rank ?????????????
    }
    else // ????????? c ?? 0
    {
        MPI_Comm_split(MPI_COMM_WORLD, c, size - rank - 1, &local); // ?? c ???? rank ????????????
    }

    int r;                    // ???? r???????????????????
    MPI_Comm_rank(local, &r); // ????????????????????? r
    pt << r;                  // ?????????? r ????? pt

    MPI_Comm inter;       // ?????????? inter
    int lead = size - 1;  // ?? leader ????????????????????
    if (rank == size - 1) // ????????????????????
        lead = 0;         // ? leader ????????????????

    // ?????? inter??? local ???? p ????? leader ??
    MPI_Intercomm_create(local, 0, p, lead, 100, &inter);

    MPI_Status s;                                 // ???? s??????????
    MPI_Send(&a, 1, MPI_DOUBLE, r, 0, inter);     // ??? a ????????? inter ????? r
    MPI_Recv(&b, 1, MPI_DOUBLE, r, 0, inter, &s); // ????? inter ??????? r ??? b ??
    pt << b;                                      // ??????? b ??????? pt
}
